openapi: 3.0.3
info:
  title: TX-BE Complete API Reference
  description: |
    Complete API specification for the AI Product Development Assistant backend service.
    
    This comprehensive API enables the creation of detailed Product Requirements Documents (PRDs) 
    through an AI-powered workflow that includes:
    - Project management and document upload
    - AI research and market analysis
    - Interactive clarification sessions
    - Automated PRD generation with architecture diagrams
    - Advanced semantic search and content analysis
    
    ## Authentication
    All API endpoints (except health checks) require authentication via API key in the header:
    ```
    Authorization: Bearer YOUR_API_KEY
    ```
    
    ## Rate Limiting
    - 100 requests per hour for free tier
    - 1000 requests per hour for premium tier
    - Rate limit headers are included in all responses
    
    ## Error Handling
    All errors follow a consistent format with `success: false` and detailed error information
    including error codes, messages, and request metadata for debugging.
    
  version: 1.0.0
  contact:
    name: TX-BE API Support
    email: support@tx-be.com
    url: https://docs.tx-be.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://tx-be.com/terms

servers:
  - url: https://api.tx-be.com
    description: Production server
  - url: https://staging-api.tx-be.com
    description: Staging server
  - url: http://localhost:3000
    description: Local development server

security:
  - ApiKeyAuth: []

tags:
  - name: Health
    description: Health check and system status endpoints
  - name: Projects
    description: Project management operations
  - name: Documents
    description: Document upload, processing, and management
  - name: Research
    description: AI research operations for market analysis
  - name: Clarification
    description: Interactive clarification for gathering requirements
  - name: PRD Generation
    description: Product Requirements Document generation
  - name: Export
    description: Export and download operations
  - name: Search
    description: Semantic search across project content
  - name: Analysis
    description: AI-powered document and content analysis

paths:
  # Health Check Endpoints
  /health:
    get:
      tags: [Health]
      summary: Comprehensive health check
      description: Performs a comprehensive health check including database connectivity
      operationId: getHealthStatus
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /:
    get:
      tags: [Health]
      summary: Simple ping endpoint
      description: Simple ping to check server status
      operationId: pingService
      security: []
      responses:
        '200':
          description: Service is running
          content:
            text/plain:
              schema:
                type: string
                example: "TX-BE API is running! This is the backend service for the AI Product Development Assistant."

  # Project Management Endpoints
  /api/v1/projects:
    post:
      tags: [Projects]
      summary: Create a new project
      description: Create a new project with product information
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

    get:
      tags: [Projects]
      summary: List all projects
      description: List all projects with their status and progress
      operationId: listProjects
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          description: Filter by project status
          schema:
            $ref: '#/components/schemas/ProjectStatus'
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Projects]
      summary: Get project details
      description: Get detailed information about a specific project
      operationId: getProject
      responses:
        '200':
          description: Project details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: [Projects]
      summary: Update project information
      description: Update project information
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProjectResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags: [Projects]
      summary: Delete a project
      description: Delete a project and all associated data
      operationId: deleteProject
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProjectResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/projects/{projectId}/status:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Projects]
      summary: Get project status
      description: Get overall project status and progress summary
      operationId: getProjectStatus
      responses:
        '200':
          description: Project status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatusResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Document Management Endpoints
  /api/v1/projects/{projectId}/documents/upload:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    post:
      tags: [Documents]
      summary: Upload a document
      description: Upload a document for processing and analysis
      operationId: uploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadDocumentRequest'
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDocumentResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/projects/{projectId}/documents:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Documents]
      summary: List project documents
      description: List all documents associated with a project
      operationId: listDocuments
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/projects/{projectId}/documents/{docId}:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
      - $ref: '#/components/parameters/DocIdParam'
    
    get:
      tags: [Documents]
      summary: Get document details
      description: Get detailed information about a specific document
      operationId: getDocument
      responses:
        '200':
          description: Document details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags: [Documents]
      summary: Delete a document
      description: Delete a document and its processed content
      operationId: deleteDocument
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Research Endpoints
  /api/v1/projects/{projectId}/research/start:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    post:
      tags: [Research]
      summary: Start AI research process
      description: Start the AI research process for market analysis and technical planning
      operationId: startResearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartResearchRequest'
      responses:
        '202':
          description: Research process started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartResearchResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/projects/{projectId}/research/status:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Research]
      summary: Get research status
      description: Get current status of the research process
      operationId: getResearchStatus
      responses:
        '200':
          description: Research status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResearchStatusResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/projects/{projectId}/research/results:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Research]
      summary: Get research results
      description: Get AI research insights and findings
      operationId: getResearchResults
      responses:
        '200':
          description: Research results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResearchResultsResponse'
        '202':
          description: Research still in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # PRD Generation Endpoints
  /api/v1/projects/{projectId}/generate/prd:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    post:
      tags: [PRD Generation]
      summary: Generate PRD
      description: Generate the final Product Requirements Document
      operationId: generatePRD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePRDRequest'
      responses:
        '202':
          description: PRD generation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratePRDResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '412':
          $ref: '#/components/responses/PreconditionError'

  # Export Endpoints
  /api/v1/projects/{projectId}/export/markdown:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    get:
      tags: [Export]
      summary: Download PRD as Markdown
      description: Download the complete PRD as a markdown file
      operationId: exportMarkdown
      responses:
        '200':
          description: Markdown file download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="AI_Chatbot_Platform_PRD_20241219.md"'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '412':
          $ref: '#/components/responses/PreconditionError'

  # Search Endpoints
  /api/v1/projects/{projectId}/search:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    
    post:
      tags: [Search]
      summary: Perform semantic search
      description: Perform semantic search across project documents and content
      operationId: semanticSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticSearchRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticSearchResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'API Key authentication. Use: Bearer YOUR_API_KEY'

  parameters:
    ProjectIdParam:
      name: projectId
      in: path
      required: true
      description: Project ID
      schema:
        type: string
        pattern: '^proj_[a-zA-Z0-9\-]+$'
        example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    DocIdParam:
      name: docId
      in: path
      required: true
      description: Document ID
      schema:
        type: string
        pattern: '^doc_[a-zA-Z0-9]+$'
        example: "doc_987654321"

    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

  responses:
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              details:
                errors:
                  - field: "productName"
                    message: "Product name is required and must be at least 3 characters"
                    code: "REQUIRED_FIELD"

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required. Please provide a valid API key."

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "Project with ID 'proj_invalid-id' not found"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Too many requests. Rate limit exceeded."
              details:
                limit: 100
                windowSize: "1 hour"
                retryAfter: 3600

    PreconditionError:
      description: Prerequisites not met
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "PRECONDITION_FAILED"
              message: "Research phase must be completed before generating PRD"

  schemas:
    # Enums
    ProjectStatus:
      type: string
      enum: [created, researching, clarifying, generating, completed, failed]
      example: "completed"

    ProcessingStatus:
      type: string
      enum: [queued, processing, completed, failed]
      example: "completed"

    PriorityLevel:
      type: string
      enum: [low, medium, high, critical]
      example: "high"

    # Common Schemas
    HealthResponse:
      type: object
      required: [isHealthy, timestamp, status]
      properties:
        isHealthy:
          type: boolean
          description: Overall health status of the service
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the health check was performed
        errorMessage:
          type: string
          nullable: true
          description: Error message if service is unhealthy
        status:
          type: object
          required: [service, database]
          properties:
            service:
              type: string
              enum: [up, down]
            database:
              type: string
              enum: [up, down]

    ErrorResponse:
      type: object
      required: [success, error, metadata]
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              description: Error code identifier
            message:
              type: string
              description: Human-readable error message
            details:
              type: object
              description: Additional error details
        metadata:
          type: object
          required: [timestamp, requestId]
          properties:
            timestamp:
              type: string
              format: date-time
            requestId:
              type: string
            path:
              type: string

    ProcessingResponse:
      type: object
      required: [success, message, status]
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Resource is still being processed"
        status:
          type: string
          example: "processing"
        estimatedCompletion:
          type: string
          format: date-time
          nullable: true

    # Project Schemas
    CreateProjectRequest:
      type: object
      required: [productName, productDescription, domain, industry, budgetRange, timeline, targetMarket, businessGoals]
      properties:
        productName:
          type: string
          minLength: 3
          maxLength: 200
          description: Name of the product
          example: "AI-Powered Customer Support Chatbot Platform"
        productDescription:
          type: string
          minLength: 10
          maxLength: 2000
          description: Detailed description of the product
          example: "A SaaS solution designed to automate customer support operations for small to medium businesses using natural language processing and machine learning."
        domain:
          type: string
          enum: [SaaS, E-commerce, Healthcare, Finance, Education, Other]
          description: Product domain
          example: "SaaS"
        industry:
          type: string
          maxLength: 100
          description: Industry sector
          example: "Customer Support"
        budgetRange:
          type: string
          enum: ["Under $10K", "$10K - $25K", "$25K - $50K", "$50K - $100K", "$100K - $250K", "$250K+"]
          description: Budget range for the project
          example: "$50K - $100K"
        timeline:
          type: string
          enum: ["1-3 months", "3-6 months", "6-9 months", "9-12 months", "12+ months"]
          description: Expected timeline
          example: "6-9 months"
        targetMarket:
          type: string
          maxLength: 500
          description: Target market description
          example: "Small to medium businesses with 50-500 employees"
        businessGoals:
          type: string
          maxLength: 1000
          description: Business goals and objectives
          example: "Reduce customer response times from hours to seconds, improve customer satisfaction, and scale support operations without proportional increase in headcount."
        uploadedDocuments:
          type: array
          items:
            type: string
          description: Array of uploaded document IDs
          example: ["doc_123456", "doc_789012"]

    CreateProjectResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [projectId, productName, status, nextStep, createdAt]
          properties:
            projectId:
              type: string
              example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            productName:
              type: string
              example: "AI-Powered Customer Support Chatbot Platform"
            status:
              $ref: '#/components/schemas/ProjectStatus'
            nextStep:
              type: string
              example: "ai_research"
            createdAt:
              type: string
              format: date-time
              example: "2024-12-19T10:30:00.000Z"

    ListProjectsResponse:
      type: object
      required: [success, data, totalProjects]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSummary'
        totalProjects:
          type: integer
          example: 2

    ProjectSummary:
      type: object
      required: [projectId, productName, status, createdAt, lastActivity, progress]
      properties:
        projectId:
          type: string
          example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        productName:
          type: string
          example: "AI-Powered Customer Support Chatbot Platform"
        status:
          $ref: '#/components/schemas/ProjectStatus'
        createdAt:
          type: string
          format: date-time
          example: "2024-12-19T10:30:00.000Z"
        lastActivity:
          type: string
          format: date-time
          example: "2024-12-19T12:45:00.000Z"
        progress:
          type: object
          required: [research, clarification, generation]
          properties:
            research:
              type: boolean
            clarification:
              type: boolean
            generation:
              type: boolean

    ProjectDetailResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/ProjectDetail'

    ProjectDetail:
      allOf:
        - $ref: '#/components/schemas/CreateProjectRequest'
        - type: object
          required: [projectId, status, createdAt, updatedAt, progress, uploadedDocuments]
          properties:
            projectId:
              type: string
              example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            status:
              $ref: '#/components/schemas/ProjectStatus'
            createdAt:
              type: string
              format: date-time
              example: "2024-12-19T10:30:00.000Z"
            updatedAt:
              type: string
              format: date-time
              example: "2024-12-19T12:45:00.000Z"
            progress:
              type: object
              required: [research, clarification, generation]
              properties:
                research:
                  type: boolean
                clarification:
                  type: boolean
                generation:
                  type: boolean
            uploadedDocuments:
              type: array
              items:
                $ref: '#/components/schemas/UploadedDocument'

    UploadedDocument:
      type: object
      required: [docId, filename, uploadedAt]
      properties:
        docId:
          type: string
          example: "doc_123456"
        filename:
          type: string
          example: "existing_requirements.pdf"
        uploadedAt:
          type: string
          format: date-time
          example: "2024-12-19T10:31:00.000Z"

    UpdateProjectRequest:
      type: object
      properties:
        productDescription:
          type: string
          maxLength: 2000
        budgetRange:
          type: string
          enum: ["Under $10K", "$10K - $25K", "$25K - $50K", "$50K - $100K", "$100K - $250K", "$250K+"]
        businessGoals:
          type: string
          maxLength: 1000

    UpdateProjectResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [projectId, message, updatedAt]
          properties:
            projectId:
              type: string
              example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            message:
              type: string
              example: "Project updated successfully"
            updatedAt:
              type: string
              format: date-time
              example: "2024-12-19T13:00:00.000Z"

    DeleteProjectResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [projectId, message, deletedAt]
          properties:
            projectId:
              type: string
              example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            message:
              type: string
              example: "Project deleted successfully"
            deletedAt:
              type: string
              format: date-time
              example: "2024-12-19T13:15:00.000Z"

    ProjectStatusResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [projectId, status, overallProgress, phases, lastActivity]
          properties:
            projectId:
              type: string
              example: "proj_a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            status:
              $ref: '#/components/schemas/ProjectStatus'
            overallProgress:
              type: integer
              minimum: 0
              maximum: 100
              example: 100
            phases:
              type: object
              required: [research, clarification, generation]
              properties:
                research:
                  $ref: '#/components/schemas/PhaseStatus'
                clarification:
                  $ref: '#/components/schemas/PhaseStatus'
                generation:
                  $ref: '#/components/schemas/PhaseStatus'
            estimatedCompletion:
              type: string
              format: date-time
              nullable: true
            lastActivity:
              type: string
              format: date-time
              example: "2024-12-19T12:45:00.000Z"

    PhaseStatus:
      type: object
      required: [status, progress]
      properties:
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
          example: "completed"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 100
        completedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-12-19T11:00:00.000Z"

    # Document Schemas
    UploadDocumentRequest:
      type: object
      required: [file, filename]
      properties:
        file:
          type: string
          format: binary
          description: The file to upload
        filename:
          type: string
          maxLength: 255
          description: Original filename
          example: "requirements_document.pdf"
        description:
          type: string
          maxLength: 500
          description: Optional description of the document
          example: "Initial product requirements and specifications"

    UploadDocumentResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [docId, filename, size, mimeType, uploadedAt, processingStatus, estimatedProcessingTime]
          properties:
            docId:
              type: string
              example: "doc_987654321"
            filename:
              type: string
              example: "requirements_document.pdf"
            size:
              type: integer
              example: 2048576
              description: File size in bytes
            mimeType:
              type: string
              example: "application/pdf"
            description:
              type: string
              example: "Initial product requirements and specifications"
            uploadedAt:
              type: string
              format: date-time
              example: "2024-12-19T10:35:00.000Z"
            processingStatus:
              $ref: '#/components/schemas/ProcessingStatus'
            estimatedProcessingTime:
              type: string
              example: "2-3 minutes"

    ListDocumentsResponse:
      type: object
      required: [success, data, totalDocuments]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSummary'
        totalDocuments:
          type: integer
          example: 2

    DocumentSummary:
      type: object
      required: [docId, filename, size, mimeType, uploadedAt, processingStatus]
      properties:
        docId:
          type: string
          example: "doc_987654321"
        filename:
          type: string
          example: "requirements_document.pdf"
        size:
          type: integer
          example: 2048576
        mimeType:
          type: string
          example: "application/pdf"
        description:
          type: string
          example: "Initial product requirements and specifications"
        uploadedAt:
          type: string
          format: date-time
          example: "2024-12-19T10:35:00.000Z"
        processingStatus:
          $ref: '#/components/schemas/ProcessingStatus'
        extractedPages:
          type: integer
          example: 15
        extractedWords:
          type: integer
          example: 2543
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 65

    DocumentDetailResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/DocumentDetail'

    DocumentDetail:
      allOf:
        - $ref: '#/components/schemas/DocumentSummary'
        - type: object
          properties:
            processedAt:
              type: string
              format: date-time
              nullable: true
              example: "2024-12-19T10:37:30.000Z"
            extractedContent:
              type: object
              nullable: true
              properties:
                pages:
                  type: integer
                  example: 15
                words:
                  type: integer
                  example: 2543
                characters:
                  type: integer
                  example: 15875
                sections:
                  type: integer
                  example: 8
            analysis:
              type: object
              nullable: true
              properties:
                keyTopics:
                  type: array
                  items:
                    type: string
                  example: ["user authentication", "payment processing", "mobile app", "API design"]
                requirements:
                  type: integer
                  example: 23
                features:
                  type: integer
                  example: 12
                technicalSpecs:
                  type: integer
                  example: 8

    DeleteDocumentResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [docId, message, deletedAt]
          properties:
            docId:
              type: string
              example: "doc_987654321"
            message:
              type: string
              example: "Document deleted successfully"
            deletedAt:
              type: string
              format: date-time
              example: "2024-12-19T13:20:00.000Z"

    # Research Schemas
    StartResearchRequest:
      type: object
      required: [researchAreas, depth]
      properties:
        researchAreas:
          type: array
          items:
            type: string
            enum: [market_analysis, technical_requirements, user_journey, feature_prioritization, architecture_planning, competitor_analysis]
          minItems: 1
          description: Areas to focus research on
          example: ["market_analysis", "technical_requirements", "user_journey", "feature_prioritization", "architecture_planning"]
        depth:
          type: string
          enum: [basic, standard, comprehensive]
          description: Depth of research analysis
          example: "comprehensive"
        includeCompetitorAnalysis:
          type: boolean
          default: true
          description: Whether to include competitor analysis

    StartResearchResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [researchId, status, estimatedDuration, nextStep, startedAt]
          properties:
            researchId:
              type: string
              example: "research_abc123def456"
            status:
              type: string
              enum: [started, in_progress, completed, failed]
              example: "started"
            estimatedDuration:
              type: string
              example: "2-3 minutes"
            nextStep:
              type: string
              example: "research_in_progress"
            startedAt:
              type: string
              format: date-time
              example: "2024-12-19T10:45:00.000Z"

    ResearchStatusResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [status, progress, currentStep, researchAreas]
          properties:
            status:
              type: string
              enum: [pending, in_progress, completed, failed]
              example: "in_progress"
            progress:
              type: integer
              minimum: 0
              maximum: 100
              example: 75
            currentStep:
              type: string
              example: "Feature Prioritization"
            researchAreas:
              type: array
              items:
                $ref: '#/components/schemas/ResearchArea'
            estimatedCompletion:
              type: string
              format: date-time
              nullable: true
              example: "2024-12-19T10:49:00.000Z"

    ResearchArea:
      type: object
      required: [name, description, status, progress]
      properties:
        name:
          type: string
          example: "Market Analysis"
        description:
          type: string
          example: "Analyzing target market and competitors"
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
          example: "completed"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 100
        startedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-12-19T10:45:30.000Z"
        completedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-12-19T10:46:30.000Z"

    ResearchResultsResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [researchId, completedAt, insights, marketAnalysis, technicalRecommendations, featurePrioritization]
          properties:
            researchId:
              type: string
              example: "research_abc123def456"
            completedAt:
              type: string
              format: date-time
              example: "2024-12-19T10:48:30.000Z"
            insights:
              type: array
              items:
                type: string
              example:
                - "The customer support automation market is growing at 25% CAGR, indicating strong demand for AI-powered solutions."
                - "Key competitors like Intercom and Zendesk have high pricing, creating opportunity for cost-effective solutions."
            marketAnalysis:
              $ref: '#/components/schemas/MarketAnalysis'
            technicalRecommendations:
              $ref: '#/components/schemas/TechnicalRecommendations'
            featurePrioritization:
              type: array
              items:
                $ref: '#/components/schemas/FeaturePriority'

    MarketAnalysis:
      type: object
      required: [marketSize, growthRate, keyTrends, competitors]
      properties:
        marketSize:
          type: string
          example: "$4.2B by 2026"
        growthRate:
          type: string
          example: "25% CAGR"
        keyTrends:
          type: array
          items:
            type: string
          example: ["AI integration", "Omnichannel support", "Self-service options"]
        competitors:
          type: array
          items:
            $ref: '#/components/schemas/Competitor'

    Competitor:
      type: object
      required: [name, marketShare, strengths, weaknesses]
      properties:
        name:
          type: string
          example: "Intercom"
        marketShare:
          type: string
          example: "15%"
        strengths:
          type: array
          items:
            type: string
          example: ["Brand recognition", "Feature completeness"]
        weaknesses:
          type: array
          items:
            type: string
          example: ["High pricing", "Complex setup"]

    TechnicalRecommendations:
      type: object
      required: [architecture, aiServices, database, deployment]
      properties:
        architecture:
          type: string
          example: "Microservices with API Gateway"
        aiServices:
          type: string
          example: "OpenAI GPT-4 for NLP, custom training for domain-specific responses"
        database:
          type: string
          example: "MongoDB for conversations, Redis for caching"
        deployment:
          type: string
          example: "AWS with auto-scaling containers"

    FeaturePriority:
      type: object
      required: [feature, priority, effort, impact, reasoning]
      properties:
        feature:
          type: string
          example: "AI Chat Interface"
        priority:
          type: string
          enum: [P0, P1, P2, P3]
          example: "P0"
        effort:
          type: string
          enum: [Low, Medium, High]
          example: "High"
        impact:
          type: string
          enum: [Low, Medium, High]
          example: "High"
        reasoning:
          type: string
          example: "Core functionality essential for MVP"

    # PRD Generation Schemas
    GeneratePRDRequest:
      type: object
      properties:
        includeArchitectureDiagrams:
          type: boolean
          default: true
          description: Whether to include architecture diagrams
        includeTechnicalSpecs:
          type: boolean
          default: true
          description: Whether to include detailed technical specifications
        includeImplementationRoadmap:
          type: boolean
          default: true
          description: Whether to include implementation roadmap
        outputFormat:
          type: string
          enum: [basic, standard, comprehensive]
          default: "comprehensive"
          description: Level of detail in the generated PRD
        customSections:
          type: array
          items:
            type: string
          description: Additional custom sections to include

    GeneratePRDResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [generationId, status, estimatedDuration, phases, startedAt]
          properties:
            generationId:
              type: string
              example: "gen_prd_456789abc123"
            status:
              type: string
              enum: [started, in_progress, completed, failed]
              example: "started"
            estimatedDuration:
              type: string
              example: "3-5 minutes"
            phases:
              type: array
              items:
                type: string
              example: ["content_structuring", "detailed_requirements", "technical_specifications", "architecture_diagrams", "implementation_planning", "final_review"]
            startedAt:
              type: string
              format: date-time
              example: "2024-12-19T11:30:00.000Z"

    # Search Schemas
    SemanticSearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          minLength: 3
          maxLength: 500
          description: Search query text
          example: "authentication and security requirements"
        searchScope:
          type: array
          items:
            type: string
            enum: [documents, research, clarifications, generated_content]
          default: ["documents", "research", "clarifications"]
          description: Scope of content to search within
        resultLimit:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
          description: Maximum number of results to return
        includeContext:
          type: boolean
          default: true
          description: Whether to include surrounding context for results
        minRelevanceScore:
          type: number
          minimum: 0
          maximum: 1
          default: 0.5
          description: Minimum relevance score threshold

    SemanticSearchResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required: [query, results, totalResults, searchTime]
          properties:
            query:
              type: string
              example: "authentication and security requirements"
            results:
              type: array
              items:
                $ref: '#/components/schemas/SearchResult'
            totalResults:
              type: integer
              example: 8
            searchTime:
              type: string
              example: "0.234s"

    SearchResult:
      type: object
      required: [source, content, relevanceScore]
      properties:
        source:
          type: string
          enum: [document, research, clarification, generated_content]
          example: "document"
        docId:
          type: string
          example: "doc_987654321"
        title:
          type: string
          example: "Requirements Document"
        content:
          type: string
          example: "The system shall implement multi-factor authentication for admin users and secure token-based authentication for API access..."
        relevanceScore:
          type: number
          minimum: 0
          maximum: 1
          example: 0.94
        context:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 5
            section:
              type: string
              example: "Security Requirements"
            surroundingText:
              type: string
              example: "...user data protection measures. The system shall implement multi-factor authentication..."
            researchArea:
              type: string
              example: "Technical Requirements"
            generatedAt:
              type: string
              format: date-time
              example: "2024-12-19T10:47:15.000Z"
